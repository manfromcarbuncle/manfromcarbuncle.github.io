<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Carbuncle]]></title>
  <link href="http://manfromcarbuncle.github.io/atom.xml" rel="self"/>
  <link href="http://manfromcarbuncle.github.io/"/>
  <updated>2016-06-02T13:43:30+01:00</updated>
  <id>http://manfromcarbuncle.github.io/</id>
  <author>
    <name><![CDATA[Carbuncle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Against React]]></title>
    <link href="http://manfromcarbuncle.github.io/blog/2016/04/01/against-react/"/>
    <updated>2016-04-01T13:50:00+01:00</updated>
    <id>http://manfromcarbuncle.github.io/blog/2016/04/01/against-react</id>
    <content type="html"><![CDATA[<p>Blogs age badly. Blog posts about currently fashionable Javascript libraries, tools and the like are out of date by the time you&rsquo;re out of the first paragraph. Very well: <code>Number(new Date())</code> gives me 1459515057130. And as I write, the React bubble is inflated beyond all reason. Smarter programmers than me have had a go at pricking it, but I don&rsquo;t see why I shouldn&rsquo;t.</p>

<p>This is going to be a negative article, if you couldn&rsquo;t tell already. I will anyway point out the obvious: that React is the product of some great engineering, that good products have been built with it, and that the community around it has a bunch of very smart people.</p>

<p>That said, it has a big problem. And that problem is this: in several places, the designers of React have faced clear choices, <em>and fudged them</em>. The result is a confused and in places breathtakingly ugly API.</p>

<h3>Fudge 1: (F|OO)P</h3>

<p>In 2016, we must concede that functional programming and object-oriented programming do not mix (or have not mixed yet) as well as people hoped. The Javascript language itself is the most egregious example of an abortive shotgun-wedding between the two; on the one hand, you have your first-class function values and (as of now) powerful features for higher-order and even point-free programming. On the other, you have an object model where objects are basically half-implemented hashmaps, but also with a bunch of Java-isms bolted on, but an inheritance model unfamiliar and confusing to those used to working with classes, but which was generally used for writing classes <code>de facto</code> and has now been augmented with syntactic sugar to that end. It&rsquo;s a mess.</p>

<p>Other comminglings have been more successful - be it Ruby&rsquo;s smart use of anonymous functions and higher-order idioms or Scala&rsquo;s full-blown fusion of the two. Yet Ruby is unashamedly an OO language at heart, with FP very much in second place. It took a clear design choice. Scala has ended up with a huge amount of incidental complexity in its type system in order to make it work both as a terser, smarter Java and as a more pragmatic Haskell (Simon Peyton-Jones makes the point somewhere that Haskell&rsquo;s type inference could only be that good because they decided to exclude subtyping entirely - not an attractive proposition to your average Java convert.) I would call it a brave experiment, but not in the end a great advert for the project of mixing the two paradigms.</p>

<p>Back to JS: designers of libraries and frameworks essentially have two subsets of JS to target. They can expose a functional-style interface (think underscore/lodash), with modules composed primarily of pure functions, plus a few implicit interfaces to program to (a HTTP request map, for example); or they can expose a bevy of constructor functions and factories, to facilitate OO code.</p>

<p>On the face of it, React has chosen the latter path.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Foo</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whatever the intentions of the engineers at Facebook, however, this is not how things have actually panned out. People overwhelmingly use React to write functional programs. That feedback has shaped the attitude of the React core team to subsequent development, but the API remains the same; and it remains an <em>OO</em> API. The cognitive dissonance between the architectural fads of React applications (Flux, Reflux, Redux &hellip; I&rsquo;m looking forward to Respite) and the <em>actual code you actually write</em> is getting worse every day.</p>

<h3>Fudge 2: (framework|library)</h3>

<p>This is a relatively minor one, but the point is nevertheless worth making.</p>

<p>React is commonly described as a <em>library</em> rather than a framework, using a commonsense definition that there isn&rsquo;t very much of it (it&rsquo;s the &lsquo;V&rsquo; in MVC!). Yet a more <em>traditional</em> definition of framework would be a library which the programmer uses by <em>inheriting</em> from it. A Rails example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two lines of code accomplish an awful lot. But they also tie you to the implementation of <code>ActiveRecord::Base</code>, in a way that simply calling a library function incorrectly does not (in the latter you&rsquo;ll get a comprehensible error, fix it and get on with your life; swapping one function out for another does not involve changing anything more than the call sites, etc).</p>

<p>React has the worst of both worlds here. On the one hand, you inherit from React, and are thus chained to its implementation. So on that definition, it&rsquo;s a framework. On the other, it is simply <em>not opinionated enough</em> to make enough things easy, like most well-regarded frameworks do. There has been a lot of chatter about &lsquo;Javascript fatigue&rsquo; recently, but it seems to me that half the complaints are about build tools and the like, and most of the rest are about <em>React</em>. Say what you like about Ember - no Ember developer wonders what their build system ought to be. Ember, at this point, basically <em>is</em> a build system. (Angular has gone a step further by forking ember-cli <em>and</em> adopting Typescript as its preferred language.) React gives you freedom to indulge in the paradox of choice around tooling, but makes switching itself out for something else as hard as switching out ActiveRecord. (<del>At least Rails is at version 5 and pretty stable since 3: React is still, for reasons obscure to me, at 0.14 and counting. Even Node didn&rsquo;t get to 0.14! You&rsquo;re Facebook, for crying out loud - just fucking <em>ship it</em> already.</del> UPDATE: they <a href="https://github.com/facebook/react/releases/tag/v15.0.0">finally fucking shipped it</a>.)</p>

<p>We know it doesn&rsquo;t have to be this way, because there exist virtual DOM diffing view layers that <em>really are</em> pure functions from plain old data to a view, and also (nowadays) more fully featured frameworks that utilise similar rendering strategies.</p>

<h3>Fudge 3: JSX</h3>

<p>Hoo boy.</p>

<p>One comes across, in that wide open space of lunacy that is the internet, many people who claim to <em>like</em> JSX. Who think it&rsquo;s <em>nice</em>.</p>

<p>I don&rsquo;t believe them. Or rather, I believe that this is some kind of Stockholm Syndrome. They may have fooled themselves into believing they like JSX. But they haven&rsquo;t fooled me.</p>

<p>In case anyone hasn&rsquo;t seen JSX before, it&rsquo;s basically Javascript, except, well, except with some extra &hellip; <em>things</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function</span> <span class="n">someJSX</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="no">Holy</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="no">Fucking</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="no">God</span> <span class="n">props</span><span class="o">=</span><span class="p">{</span> <span class="ss">something</span><span class="p">:</span> <span class="s2">&quot;here&quot;</span> <span class="p">}</span> <span class="sr">/&gt;</span>
</span><span class='line'><span class="sr">            &lt;/</span><span class="no">Fucking</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="sr">/Holy&gt;</span>
</span><span class='line'><span class="sr">    )</span>
</span><span class='line'><span class="sr">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exactly what these <em>things</em> are is somewhat obscure. It looks sorta like HTML, but isn&rsquo;t. It also sorta looks like XML (but also isn&rsquo;t), and so might remind older hands of E4X, a previous attempt to shanghai XML literal syntax into Javascript, which was widely hated and being quietly dropped from Spidermonkey roundabout the time, so far as I can tell, that some Facebookers were working on JSX. It was not missed, but now a weird non-standard changeling version has appeared in a much-hyped framework (library, whatever) and it&rsquo;s being treated like it&rsquo;s the Second Coming of Christ.</p>

<p>We are truly the strangest tribe who ever walked upright.</p>

<p>All reasonable people, then, agree that JSX is monstrously ugly. Yet at the root of its ugliness is precisely the kind of fudge we have already seen twice.</p>

<p>There are basically two ways to programmatically create markup. The first is the historically more common one: create a specific, external templating DSL which merely <em>declares</em> the layout, and perhaps has a limited subset of common control structures (if/else and loops at least). Everything from ERB to Jade to (in a certain sense) XSLT can be characterised this way. The template will either be parsed at runtime or precompiled to a function in $LANGUAGE that outputs (in the naive case) a string of markup or (in the post-React era) a data structure of some kind that maps onto a DOM tree.</p>

<p>An example (there are many template languages that would compile this snippet):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='handlebars'><span class='line'><span class="x">&lt;p&gt;Hello </span><span class="cp">{{</span> <span class="nv">user.name</span> <span class="cp">}}</span><span class="x">!&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The advantages are that the templating language is closer to the output, and thus hypothetically it will be easier for specialist designers to work on without needing to learn the implementation language of the app. The disadvantage is the context-switching, both for the developer and for tools. (We note, parenthetically, that Angular 2 is a fine example of this difficulty; they may have switched to Typescript, but a lot of action still happens in the templates, beyond the purview of the type-checker and editor tooling. They say they&rsquo;re working on it - we&rsquo;ll see how they do.)</p>

<p>The <em>other</em> way is to simply write code that is idiomatic <em>within the primary language of the system</em> - Javascript, Ruby, Clojure, whatever, using the native data structures and syntax of that language to describe the markup. The view library then merely needs to apply a function to the input data, <em>et voilá!</em></p>

<p>The trade-off is, of course, the exact opposite to the external templating language: much better tooling support and an easier cognitive ride for &lsquo;full stack&rsquo; types; but any work on the view has to be done by someone with an adequate grasp of the implementation language.</p>

<p>An example (from <a href="https://github.com/ohanhi/hyperscript-helpers"><code>hyperscript-helpers</code></a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ul</span><span class="p">(</span><span class="s1">&#39;#bestest-menu&#39;</span><span class="p">,</span> <span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span> <span class="nx">item</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">li</span><span class="p">(</span><span class="s1">&#39;#item-&#39;</span><span class="o">+</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">),</span> <span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="p">))</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>JSX - alas! - refuses to make the tradeoff. The result is a true abomination. Developers are forced to context-switch line-by-line, character-by-character. Tool support is OK, at this point, but Sublime Text (for example) is unable to idiomatically indent things. (The earlier JSX snippet actually broke this whole Markdown document when I tried to tag it as Javascript.) But good luck getting designers to work with something like <em>that</em>; although even they will probably be able to see the problem with something like <a href="https://github.com/shastajs/boilerplate/blob/master/client/routes.js#L10">this</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">routes</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">IndexRoute</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">HomeView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/about&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">AboutView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/login&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">LoginView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;*&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">NotFoundView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/Route&gt;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I mean, even Spring doesn&rsquo;t make you define this kind of stuff in XML anymore. What&rsquo;s wrong with a goddamn <em>function</em>?</p>

<p>It is, of course, possible to write React code without JSX. I heartily, heartily recommend you do <em>exactly that</em> if possible. Your soul will thank you. Your choice, however, is either hitting the absurd boilerplate explosion of React&rsquo;s JS API directly, or exploring a highly fragmented landscape of competing template libraries, maintained with varying levels of commitment. Take a packed lunch!</p>

<h3>Canned responses to notional replies</h3>

<h4>But it&rsquo;s fast!</h4>

<p>It <em>is</em> fast (although probably not as fast as you think; and much faster with immutable data). The most positive feature by far of React&rsquo;s impact on the web-client landscape is that it proved that complex UIs could be performant, and forced the likes of Angular and Ember to make a serious attempt to catch up. (Many of the notorious huge changes in Angular 2 are there for performance reasons, for example.) For newer frameworks and libraries, and even languages, React&rsquo;s performance is the benchmark. If you&rsquo;re not beating it, or at least in the right ballpark, you&rsquo;re not ready for 1.0. This is a very, very good thing. Even better is that it forced developers to take performance seriously themselves. A couple of years ago, people would say things like &ldquo;don&rsquo;t worry about performance because modern phones are really fast&rdquo;. Anyone who says that nowadays around web engineers will get a (verbal) slap. React taught a generation of us that we could code with a little mechanical sympathy without dropping into C.</p>

<p>However, React is a victim of its own success. Angular 2, apparently kicks the pants off of React once you hit 10,000 elements in the DOM. Don&rsquo;t ever do that, by the way - it&rsquo;s stupid. (It&rsquo;s bad for accessibility and browsers are bad at reclaiming memory from the DOM so you&rsquo;ll be bleeding like a stuck pig.) But if you <em>do</em>, Angular will do it faster nowadays. Ember has caught up on re-renders and is catching up on initial render, and has a better server pre-render story. Further afield, cycle.js, Elm and others compare favourably to React. We can no longer take for granted that the big performance wins are coming from React.</p>

<h4>But Redux is amazing!</h4>

<p>Redux is just the Elm architecture in Javascript. Really, you should just write Elm - the action dispatching business is much nicer in a language with abstract data types and pattern matching, rather than sacrificing code clarity to Balok-Uth, Dark Lord of Switch Statements, as one unfortunately must in Javascript. (The same is true of re-frame, the Clojurescript version of the same idea, with React buried deep within its bowels; although you&rsquo;ll need to bring in core.match, and protocol-based dispatch is somewhat cleaner to my mind.) And if you&rsquo;re new to all this and don&rsquo;t know a damn thing about ADTs or pattern-matching, Elm is a very nice place to learn.</p>

<h4>So what should I use instead?</h4>

<p>Eh&hellip; Basically anything. :-) I am not a fanboy for any particular framework. I am a React anti-fanboy.</p>

<p>There&rsquo;s a lot of good stuff going on in the JS world, even if that comes at the cost of fatiguing churn. Play around! React&rsquo;s bubble <em>will</em> burst - and it&rsquo;s impossible to know what will replace it. So cast your net widely.</p>

<p>Finally, with Clojurescript, Purescript, Elm and others, JS as a compilation target has become a serious proposition for languages with semantics significantly different to JS. All these projects are very much worth a look as alternatives for bringing FP to the browser.</p>

<h4>Why are you so bitter?</h4>

<p>Because the least tolerable JS framework is the least avoidable. I recently changed jobs, and was amazed to see how completely it&rsquo;s come to loom over the labour market. Lying recruiters, ever the bellwethers, are lying about working with React shops. It tires a man out to see stuff like the above JSX routespec passing without gasps of horror. That&rsquo;s why I&rsquo;m bitter. I thought I was young enough to avoid that kind of tentacled horror from the deep. But what is old is new again, and all that. And here I am - waiting for it to die.</p>

<p>Bite me.</p>
]]></content>
  </entry>
  
</feed>
